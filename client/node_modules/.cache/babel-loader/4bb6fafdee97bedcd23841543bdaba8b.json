{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kriti\\\\Desktop\\\\web_chat_app\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:5000');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef(); //const [ state, setState ] = useState({ message: \"\", name: \"\" })\n\n  const [state, setState] = useState({\n    message: \"\"\n  });\n  const [chat, setChat] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  const muteUnmuteV = () => {\n    const enabled = stream.getVideoTracks()[0].enabled;\n\n    if (enabled) {\n      myVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n    } else {\n      myVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n    }\n  };\n\n  const muteUnmuteA = () => {\n    const enabled = stream.getAudioTracks()[0].enabled;\n\n    if (enabled) {\n      myVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n    } else {\n      myVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n    }\n  };\n  /*const onTextChange = (e) => {\r\n  setState({ ...state, [e.target.name]: e.target.value })\r\n  }*/\n\n\n  const onMessageSubmit = e => {\n    const {\n      message\n    } = state;\n    socket.emit(\"message\", {\n      message\n    });\n    e.preventDefault();\n    setState({\n      message: \"\"\n    });\n  };\n\n  const renderChat = () => {\n    return chat.map(({\n      message\n    }, index, name) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [name, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      muteUnmuteV,\n      muteUnmuteA,\n      onMessageSubmit,\n      renderChat\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"pGSypDQ8qO8AVMv08dul6wtd6Vg=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/kriti/Desktop/web_chat_app/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","state","setState","message","chat","setChat","socketRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivingCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload","muteUnmuteV","enabled","getVideoTracks","muteUnmuteA","getAudioTracks","onMessageSubmit","e","preventDefault","renderChat","map","index"],"mappings":"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","sourcesContent":["import React, { createContext ,useState , useRef, useEffect} from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst ContextProvider =({ children })=> {\r\n    const [stream, setStream] = useState(null);\r\n    const [me, setMe] = useState('');\r\n    const [call,setCall] = useState({});\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [name, setName] = useState('');\r\n    \r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const connectionRef = useRef();\r\n\r\n    //const [ state, setState ] = useState({ message: \"\", name: \"\" })\r\n    const [ state, setState ] = useState({ message: \"\"})\r\n\tconst [ chat, setChat ] = useState([])\r\n    const socketRef = useRef()\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n        .then((currentStream) => {\r\n            setStream(currentStream);\r\n            myVideo.current.srcObject = currentStream;\r\n\r\n        });\r\n\r\n        socket.on('me', (id) => setMe(id));\r\n\r\n        socket.on('calluser', ({ from, name: callerName, signal }) => {\r\n            setCall({ isReceivingCall: true, from, name: callerName, signal })\r\n        });\r\n      \r\n    }, []);\r\n    \r\n    const answerCall = () =>{\r\n        setCallAccepted(true)\r\n\r\n        const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answercall', { signal: data, to: call.from });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n\r\n    }\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({ initiator: true, trickle: false, stream });\r\n        peer.on('signal', (data) => {\r\n            socket.emit('calluser', { userToCall: id, signalData: data, from: me, name });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted',(signal) => {\r\n            setCallAccepted(true);\r\n\r\n            peer.signal(signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () =>{\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n\r\n        window.location.reload();\r\n    }\r\n    const muteUnmuteV = () => { \r\n        const enabled = stream.getVideoTracks()[0].enabled;\r\n        if (enabled) {\r\n            myVideo.current.srcObject.getVideoTracks()[0].enabled = false;\r\n        } \r\n        else {\r\n            myVideo.current.srcObject.getVideoTracks()[0].enabled = true;\r\n        }\r\n    }\r\n    const muteUnmuteA = () => { \r\n        const enabled = stream.getAudioTracks()[0].enabled;\r\n        if (enabled) {\r\n            myVideo.current.srcObject.getAudioTracks()[0].enabled = false;\r\n        } \r\n        else {\r\n            myVideo.current.srcObject.getAudioTracks()[0].enabled = true;\r\n        }\r\n    }\r\n\r\n\r\n    /*const onTextChange = (e) => {\r\n\t\tsetState({ ...state, [e.target.name]: e.target.value })\r\n\t}*/\r\n\r\n\tconst onMessageSubmit = (e) => {\r\n\t\tconst { message } = state\r\n\t\tsocket.emit(\"message\", { message })\r\n\t\te.preventDefault()\r\n\t\tsetState({ message: \"\" })\r\n\t}\r\n\r\n\tconst renderChat = () => {\r\n\t\treturn chat.map(({  message }, index,name) => (\r\n\t\t\t<div key={index}>\r\n\t\t\t\t<h3>\r\n\t\t\t\t\t{name}: <span>{message}</span>\r\n\t\t\t\t</h3>\r\n\t\t\t</div>\r\n\t\t))}\r\n\r\n    return(\r\n        <SocketContext.Provider value={{call,callAccepted,myVideo,userVideo,stream,name,setName,callEnded,me,callUser,leaveCall,answerCall,muteUnmuteV,muteUnmuteA,onMessageSubmit,renderChat}}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n}\r\n\r\nexport { ContextProvider, SocketContext };"]},"metadata":{},"sourceType":"module"}