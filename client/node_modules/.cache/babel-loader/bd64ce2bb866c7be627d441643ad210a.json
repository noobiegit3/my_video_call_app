{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kriti\\\\Desktop\\\\web_chat_app\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:5000');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const [video, setVideo] = useState(true);\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n      myVideo.current.srcObject.getVideoTracks()[0].enabled = video;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  const muteUnmute = () => {\n    setVideo(false); //const enabled = stream.getAudioTracks()[0].enabled;\n    //if (enabled) {\n    //   myVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n    //} \n    //else {\n    //myVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n    //}\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      muteUnmute\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"3wD2FbEyIzOsXZ1JKgObgisU9Cg=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/kriti/Desktop/web_chat_app/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","video","setVideo","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","audio","then","currentStream","current","srcObject","getVideoTracks","enabled","on","id","from","callerName","signal","isReceivingCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload","muteUnmute"],"mappings":"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","sourcesContent":["import React, { createContext ,useState , useRef, useEffect} from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst ContextProvider =({ children })=> {\r\n    const [stream, setStream] = useState(null);\r\n    const [me, setMe] = useState('');\r\n    const [call,setCall] = useState({});\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [video,setVideo]=useState(true);\r\n    \r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const connectionRef = useRef();\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n        .then((currentStream) => {\r\n            setStream(currentStream);\r\n            myVideo.current.srcObject = currentStream;\r\n            myVideo.current.srcObject.getVideoTracks()[0].enabled = video;\r\n        });\r\n\r\n        socket.on('me', (id) => setMe(id));\r\n\r\n        socket.on('calluser', ({ from, name: callerName, signal }) => {\r\n            setCall({ isReceivingCall: true, from, name: callerName, signal })\r\n        });\r\n      \r\n    }, []);\r\n    \r\n    const answerCall = () =>{\r\n        setCallAccepted(true)\r\n\r\n        const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answercall', { signal: data, to: call.from });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n\r\n    }\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({ initiator: true, trickle: false, stream });\r\n        peer.on('signal', (data) => {\r\n            socket.emit('calluser', { userToCall: id, signalData: data, from: me, name });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted',(signal) => {\r\n            setCallAccepted(true);\r\n\r\n            peer.signal(signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () =>{\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n\r\n        window.location.reload();\r\n    }\r\n    const muteUnmute = () => {\r\n        setVideo(false);\r\n        //const enabled = stream.getAudioTracks()[0].enabled;\r\n        //if (enabled) {\r\n         //   myVideo.current.srcObject.getVideoTracks()[0].enabled = false;\r\n        //} \r\n        //else {\r\n            //myVideo.current.srcObject.getVideoTracks()[0].enabled = true;\r\n        //}\r\n    }\r\n\r\n    return(\r\n        <SocketContext.Provider value={{call,callAccepted,myVideo,userVideo,stream,name,setName,callEnded,me,callUser,leaveCall,answerCall,muteUnmute}}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n}\r\n\r\nexport { ContextProvider, SocketContext };"]},"metadata":{},"sourceType":"module"}