{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kriti\\\\Desktop\\\\web_chat_app\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('https://my-video-chat-application.herokuapp.com');\nconst username = prompt(\"what is your username\");\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    socket.on(\"connect\", () => {\n      socket.emit(\"username\", username);\n    });\n    socket.on(\"users\", users => {\n      setUsers(users);\n    });\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    });\n    socket.on(\"connected\", user => {\n      setUsers(users => [...users, user]);\n    });\n    socket.on(\"disconnected\", id => {\n      setUsers(users => {\n        return users.filter(user => user.id !== id);\n      });\n    });\n  }, []); //Make_a_call\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  }; //Answer_call\n\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  }; //Exit_call   \n\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n  }; //Video_toggle   \n\n\n  const muteUnmuteV = () => {\n    const enabled = stream.getVideoTracks()[0].enabled;\n\n    if (enabled) {\n      myVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n    } else {\n      myVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n    }\n  }; //Audio_toggle\n\n\n  const muteUnmuteA = () => {\n    const enabled = stream.getAudioTracks()[0].enabled;\n\n    if (enabled) {\n      myVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n    } else {\n      myVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n    }\n  }; //Share_screen\n\n\n  const shareScreen = () => {\n    navigator.mediaDevices.getDisplayMedia({\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        sampleRate: 44100\n      }\n    }).then(screenStream => {\n      setStream(screenStream);\n      connectionRef.current.replaceTrack(stream.getVideoTracks()[0], screenStream.getVideoTracks()[0], stream);\n      myVideo.current.srcObject = screenStream;\n\n      screenStream.getTracks()[0].onended = () => {\n        connectionRef.current.replaceTrack(screenStream.getVideoTracks()[0], stream.getVideoTracks()[0], stream);\n        myVideo.current.srcObject = stream;\n      };\n    });\n  }; //Messenger\n\n\n  const submit = event => {\n    event.preventDefault();\n    socket.emit(\"send\", message);\n    setMessage(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      muteUnmuteV,\n      muteUnmuteA,\n      users,\n      message,\n      messages,\n      submit,\n      setMessage,\n      shareScreen\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"wj410MNsqbNkWQYuEqxIP/4kQso=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/kriti/Desktop/web_chat_app/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","username","prompt","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","users","setUsers","message","setMessage","messages","setMessages","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivingCall","emit","user","filter","callUser","peer","initiator","trickle","data","userToCall","signalData","answerCall","to","leaveCall","destroy","muteUnmuteV","enabled","getVideoTracks","muteUnmuteA","getAudioTracks","shareScreen","getDisplayMedia","cursor","echoCancellation","noiseSuppression","sampleRate","screenStream","replaceTrack","getTracks","onended","submit","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { createContext ,useState , useRef, useEffect} from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('https://my-video-chat-application.herokuapp.com');\r\n\r\nconst username = prompt(\"what is your username\");\r\n\r\nconst ContextProvider =({ children })=> {\r\n    const [stream, setStream] = useState(null);\r\n    const [me, setMe] = useState('');\r\n    const [call,setCall] = useState({});\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [users, setUsers] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    \r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const connectionRef = useRef();\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n        .then((currentStream) => {\r\n            setStream(currentStream);\r\n            myVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('me', (id) => setMe(id));\r\n\r\n        socket.on('calluser', ({ from, name: callerName, signal }) => {\r\n            setCall({ isReceivingCall: true, from, name: callerName, signal })\r\n        });\r\n\r\n        socket.on(\"connect\", () => {\r\n            socket.emit(\"username\", username);\r\n        });\r\n      \r\n        socket.on(\"users\", users => {\r\n            setUsers(users);\r\n        });\r\n      \r\n        socket.on(\"message\", message => {\r\n            setMessages(messages => [...messages, message]);\r\n        });\r\n      \r\n        socket.on(\"connected\", user => {\r\n            setUsers(users => [...users, user]);\r\n        });\r\n      \r\n        socket.on(\"disconnected\", id => {\r\n            setUsers(users => {\r\n              return users.filter(user => user.id !== id);\r\n            });\r\n        });\r\n    }, []);\r\n\r\n//Make_a_call\r\n    const callUser = (id) => {\r\n        const peer = new Peer({ initiator: true, trickle: false, stream });\r\n        \r\n        peer.on('signal', (data) => {\r\n            socket.emit('calluser', { userToCall: id, signalData: data, from: me, name });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted',(signal) => {\r\n            setCallAccepted(true);\r\n\r\n            peer.signal(signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n//Answer_call\r\n    const answerCall = () =>{\r\n    setCallAccepted(true)\r\n\r\n    const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n    peer.on('signal', (data) => {\r\n        socket.emit('answercall', { signal: data, to: call.from });\r\n    });\r\n\r\n    peer.on('stream', (currentStream) => {\r\n        userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    peer.signal(call.signal);\r\n\r\n    connectionRef.current = peer;\r\n    }\r\n\r\n//Exit_call   \r\n    const leaveCall = () =>{\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n    }\r\n\r\n//Video_toggle   \r\n    const muteUnmuteV = () => { \r\n        const enabled = stream.getVideoTracks()[0].enabled;\r\n        if (enabled) {\r\n            myVideo.current.srcObject.getVideoTracks()[0].enabled = false;\r\n        } \r\n        else {\r\n            myVideo.current.srcObject.getVideoTracks()[0].enabled = true;\r\n        }\r\n    }\r\n    \r\n//Audio_toggle\r\n    const muteUnmuteA = () => { \r\n        const enabled = stream.getAudioTracks()[0].enabled;\r\n        if (enabled) {\r\n            myVideo.current.srcObject.getAudioTracks()[0].enabled = false;\r\n        } \r\n        else {\r\n            myVideo.current.srcObject.getAudioTracks()[0].enabled = true;\r\n        }\r\n    }\r\n\r\n//Share_screen\r\n    const  shareScreen=() =>{\r\n        navigator.mediaDevices.getDisplayMedia( {\r\n            video: {\r\n                cursor: \"always\"\r\n            },\r\n            audio: {\r\n                echoCancellation: true,\r\n                noiseSuppression: true,\r\n                sampleRate: 44100\r\n            }\r\n        } )\r\n        .then((screenStream) => {\r\n            setStream(screenStream);\r\n            connectionRef.current.replaceTrack(stream.getVideoTracks()[0],screenStream.getVideoTracks()[0],stream);\r\n            myVideo.current.srcObject = screenStream;\r\n\r\n            screenStream.getTracks()[0].onended = () =>{\r\n                connectionRef.current.replaceTrack(screenStream.getVideoTracks()[0],stream.getVideoTracks()[0],stream);\r\n                myVideo.current.srcObject=stream;\r\n            }\r\n        })\r\n    }\r\n\r\n//Messenger\r\n    const submit = event => {\r\n        event.preventDefault();\r\n        socket.emit(\"send\", message);\r\n        setMessage(\"\");\r\n    }\r\n        \r\n    \r\n        \r\n    return(\r\n        <SocketContext.Provider value={{call,callAccepted,myVideo,userVideo,stream,name,setName,callEnded,me,callUser,leaveCall,answerCall,muteUnmuteV,muteUnmuteA,users,message,messages,submit,setMessage,shareScreen}}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n}\r\n\r\nexport { ContextProvider, SocketContext };"]},"metadata":{},"sourceType":"module"}