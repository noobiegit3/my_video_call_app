{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kriti\\\\Desktop\\\\web_chat_app\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:5000');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      const muteUnmute = () => {\n        const enabled = currentStream.getAudioTracks()[0].enabled;\n\n        if (enabled) {\n          currentStream.getAudioTracks()[0].enabled = false;\n          setUnmuteButton();\n        } else {\n          setMuteButton();\n          currentStream.getAudioTracks()[0].enabled = true;\n        }\n      };\n\n      const setUnmuteButton = () => {\n        const html = `<i class=\"unmute fa fa-microphone-slash\"></i>\n                <span class=\"unmute\">Unmute</span>`;\n        document.getElementById(\"muteButton\").innerHTML = html;\n      };\n\n      const setMuteButton = () => {\n        const html = `<i class=\"fa fa-microphone\"></i>\n                <span>Mute</span>`;\n        document.getElementById(\"muteButton\").innerHTML = html;\n      }; //currentStream.getVideoTracks()[0].enabled = !(currentStream.getVideoTracks()[0].enabled);\n\n\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      muteUnmute\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"DQdO+HX8c9NPaJfje35g0kQjBrA=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/kriti/Desktop/web_chat_app/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","muteUnmute","enabled","getAudioTracks","setUnmuteButton","setMuteButton","html","document","getElementById","innerHTML","current","srcObject","on","id","from","callerName","signal","isReceivingCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext ,useState , useRef, useEffect} from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst ContextProvider =({ children })=> {\r\n    const [stream, setStream] = useState(null);\r\n    const [me, setMe] = useState('');\r\n    const [call,setCall] = useState({});\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [name, setName] = useState('');\r\n    \r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const connectionRef = useRef();\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n        .then((currentStream) => {\r\n            const muteUnmute = ()=> {\r\n                const enabled = currentStream.getAudioTracks()[0].enabled;\r\n                if (enabled) {\r\n                  currentStream.getAudioTracks()[0].enabled = false;\r\n                  setUnmuteButton();\r\n                } else {\r\n                  setMuteButton();\r\n                  currentStream.getAudioTracks()[0].enabled = true;\r\n                }\r\n              };\r\n        \r\n              const setUnmuteButton = () => {\r\n                const html = `<i class=\"unmute fa fa-microphone-slash\"></i>\r\n                <span class=\"unmute\">Unmute</span>`;\r\n                document.getElementById(\"muteButton\").innerHTML = html;\r\n              };\r\n              const setMuteButton = () => {\r\n                const html = `<i class=\"fa fa-microphone\"></i>\r\n                <span>Mute</span>`;\r\n                document.getElementById(\"muteButton\").innerHTML = html;\r\n              };\r\n            \r\n            //currentStream.getVideoTracks()[0].enabled = !(currentStream.getVideoTracks()[0].enabled);\r\n\r\n            setStream(currentStream);\r\n\r\n            myVideo.current.srcObject = currentStream;\r\n            \r\n        });\r\n\r\n        socket.on('me', (id) => setMe(id));\r\n\r\n        socket.on('calluser', ({ from, name: callerName, signal }) => {\r\n            setCall({ isReceivingCall: true, from, name: callerName, signal })\r\n        });\r\n      \r\n    }, []);\r\n    \r\n    const answerCall = () =>{\r\n        setCallAccepted(true)\r\n\r\n        const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answercall', { signal: data, to: call.from });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n\r\n    }\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({ initiator: true, trickle: false, stream });\r\n        peer.on('signal', (data) => {\r\n            socket.emit('calluser', { userToCall: id, signalData: data, from: me, name });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        socket.on('callaccepted',(signal) => {\r\n            setCallAccepted(true);\r\n\r\n            peer.signal(signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () =>{\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n\r\n        window.location.reload();\r\n    }\r\n\r\n    return(\r\n        <SocketContext.Provider value={{call,callAccepted,myVideo,userVideo,stream,name,setName,callEnded,me,callUser,leaveCall,answerCall,muteUnmute}}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n}\r\n\r\nexport { ContextProvider, SocketContext };"]},"metadata":{},"sourceType":"module"}